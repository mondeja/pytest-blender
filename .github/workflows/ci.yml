name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test against Pytest v7
          - platform: ubuntu-latest
            pytest-version: '7.0.1'
            blender-version: '3.1.2'
            python-version: '3.10'
          # Test against Pytest v6
          - platform: ubuntu-latest
            pytest-version: '6.2.5'
            blender-version: '2.93.9'
            python-version: '3.9'
          # Test in MacOS (Py310)
          - platform: macos-latest
            pytest-version: '7.0.1'
            blender-version: '3.1.2'
            python-version: '3.10'
          # Test in MacOS (Py39)
          - platform: macos-latest
            pytest-version: '6.2.5'
            blender-version: '2.93.9'
            python-version: '3.9'
          # Test previous Blender versions
          - platform: ubuntu-latest
            pytest-version: '7.0.1'
            blender-version: '2.83.9'
            python-version: '3.8'
          - platform: ubuntu-latest
            pytest-version: '7.0.1'
            blender-version: '2.82'
            python-version: '3.7'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade PIP
        run: python -m pip install --upgrade pip
      - name: Cache Blender ${{ matrix.blender-version }}
        uses: actions/cache@v3
        id: cache-blender
        with:
          path: |
            blender-*
            _blender-executable-path.txt
          key: ${{ runner.os }}-${{ matrix.blender-version }}
      - name: Download Blender ${{ matrix.blender-version }}
        if: steps.cache-blender.outputs.cache-hit != 'true'
        id: download-blender
        run: |
          python -m pip install --upgrade blender-downloader
          echo "$(blender-downloader \
          ${{ matrix.blender-version }} --extract --remove-compressed \
          --print-blender-executable --quiet)" > _blender-executable-path.txt
      - name: Install dependencies
        id: install-dependencies
        run: |
          python -m pip install .[test] pytest==${{ matrix.pytest-version }}
          blender_executable="$(< _blender-executable-path.txt tr -d '\n')"
          python_blender_executable="$(pytest-blender --blender-executable $blender_executable)"
          $python_blender_executable -m ensurepip
          $python_blender_executable -m pip install pytest==${{ matrix.pytest-version }}
          echo "::set-output name=blender-executable::$blender_executable"
      - name: Test with Blender Python executable (no cache)
        run: pytest -svv -p no:cacheprovider --blender-executable "${{ steps.install-dependencies.outputs.blender-executable }}" tests
      - name: Test with Blender Python executable
        run: pytest -svv --blender-executable "${{ steps.install-dependencies.outputs.blender-executable }}" tests
      - name: Test with local Python executable
        run: BLENDER_EXECUTABLE="${{ steps.install-dependencies.outputs.blender-executable }}" pytest -svv -p no:pytest-blender tests
      - name: Integration tests
        run: BLENDER_EXECUTABLE="${{ steps.install-dependencies.outputs.blender-executable }}" sh tests/integration.sh

  build-sdist:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python v3.8
        with:
          python-version: 3.9
      - name: Build sdist
        run: python setup.py sdist
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  build-wheel:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    name: Build wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python v3.8
        with:
          python-version: 3.9
      - name: Install wheel
        run: python -m pip install --upgrade wheel
      - name: Build wheel
        run: python setup.py bdist_wheel
      - uses: actions/upload-artifact@v2
        with:
          path: ./dist/*.whl

  pypi-upload:
    name: Upload to PyPI
    needs:
      - build-sdist
      - build-wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
          # repository_url: https://test.pypi.org/legacy/

  release:
    name: Release
    needs:
      - build-sdist
      - build-wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get tag metadata
        id: tag
        run: |
          TAG_TITLE=${GITHUB_REF#refs/*/}
          echo ::set-output name=title::$TAG_TITLE
          git -c protocol.version=2 fetch --prune --progress \
            --no-recurse-submodules origin \
            +refs/heads/*:refs/remotes/origin/* +refs/tags/*:refs/tags/*
          TAG_BODY="$(git tag -l --format='%(contents)' $TAG_TITLE)"
          TAG_BODY="${TAG_BODY//'%'/'%25'}"
          TAG_BODY="${TAG_BODY//$'\n'/'%0A'}"
          TAG_BODY="${TAG_BODY//$'\r'/'%0D'}"
          echo ::set-output name=body::$TAG_BODY
      - name: Create Release
        uses: actions/create-release@v1.1.4
        id: create-release
        with:
          tag_name: ${{ steps.tag.outputs.title }}
          release_name: ${{ steps.tag.outputs.title }}
          body: ${{ steps.tag.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v2
        name: Download builds
        with:
          name: artifact
          path: dist
      - uses: shogo82148/actions-upload-release-asset@v1.3.0
        name: Upload release assets
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/*
